"use strict";(self.webpackChunkapp_src=self.webpackChunkapp_src||[]).push([[9377],{68534:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var s=n(85893),o=n(11151);const a={id:"dotnet-test-command",title:"Dotnet Test Command",tags:["dotnet"]},r=void 0,l={id:"programming/dotnet/dotnet-test-command",title:"Dotnet Test Command",description:"Sample Test Command",source:"@site/docs/programming/dotnet/dotnet-test-command.md",sourceDirName:"programming/dotnet",slug:"/programming/dotnet/dotnet-test-command",permalink:"/app/docs/programming/dotnet/dotnet-test-command",draft:!1,unlisted:!1,tags:[{label:"dotnet",permalink:"/app/docs/tags/dotnet"}],version:"current",frontMatter:{id:"dotnet-test-command",title:"Dotnet Test Command",tags:["dotnet"]},sidebar:"docsSidebar",previous:{title:"Dotnet Nunit Assert",permalink:"/app/docs/programming/dotnet/dotnet-nunit-assert"},next:{title:"Dotnet Test Enumerate",permalink:"/app/docs/programming/dotnet/dotnet-test-enumerate"}},d={},i=[{value:"Sample Test Command",id:"sample-test-command",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"sample-test-command",children:"Sample Test Command"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:'dotnet test "--logger:junit;LogFilePath=./test-reports/results.xml" ./Project.Tests.xxx -v n --no-build --filter\nTestCategory=xxx -- NUnit.NumberOfTestWorkers=10 -- TestRunParameters.Parameter\\(name=\\"BUILD_NAME\\", value=\\"xxx\\"\\) --\nTestRunParameters.Parameter\\(name=\\"RUN_ID\\", value=\\"0\\"\\)\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"\u2013\u2013filter"})," option can be used to fine tune which tests are executed."]}),"\n",(0,s.jsx)(t.p,{children:"For example to run the single test Test1 in TestClass1:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"dotnet test --filter DisplayName=XUnitTestProject1.TestClass1.Test1\n"})}),"\n",(0,s.jsxs)(t.p,{children:["To run all the tests in a single test class, the ~ ",(0,s.jsx)(t.code,{children:"contains"})," operator can be used, for example:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"dotnet test --filter DisplayName~XUnitTestProject1.TestClass1\n"})}),"\n",(0,s.jsxs)(t.p,{children:["To run all tests with a specific category (trait), for example all the ",(0,s.jsx)(t.code,{children:"Smoke Tests"}),' (in xUnit.net this would be the\nattribute [Trait("Category", "Smoke Test")]):']}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:'dotnet test --filter Category="Smoke Test"\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ! ",(0,s.jsx)(t.code,{children:"not"})," operator can be used as part of the filter expression, for example to run all tests except for Test1:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"dotnet test --filter FullyQualifiedName!=XUnitTestProject1.TestClass1.Test1\n"})})]})}function m(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>r});var s=n(67294);const o={},a=s.createContext(o);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);