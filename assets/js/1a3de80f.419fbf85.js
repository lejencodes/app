"use strict";(self.webpackChunkapp_src=self.webpackChunkapp_src||[]).push([[3556],{18488:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>a,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var r=n(85893),t=n(11151);const s={id:"solid-principle",title:"Solid Principle",tags:["solid"]},o=void 0,c={id:"programming/object-oriented-design/solid-principle",title:"Solid Principle",description:"SOLID is an acronym for the first five object-oriented design (OOD) principles by Robert C. Martin (also known",source:"@site/docs/programming/object-oriented-design/solid-principle.md",sourceDirName:"programming/object-oriented-design",slug:"/programming/object-oriented-design/solid-principle",permalink:"/app/docs/programming/object-oriented-design/solid-principle",draft:!1,unlisted:!1,tags:[{label:"solid",permalink:"/app/docs/tags/solid"}],version:"current",frontMatter:{id:"solid-principle",title:"Solid Principle",tags:["solid"]},sidebar:"docsSidebar",previous:{title:"Single Responsibility Principle",permalink:"/app/docs/programming/object-oriented-design/single-responsibility-principle"},next:{title:"Rancher Desktop",permalink:"/app/docs/category/rancher-desktop"}},l={},p=[];function d(e){const i={a:"a",em:"em",li:"li",p:"p",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.em,{children:"SOLID"})," is an acronym for the first five object-oriented design (OOD) principles by Robert C. Martin (also known\nas ",(0,r.jsx)(i.a,{href:"http://en.wikipedia.org/wiki/Robert_Cecil_Martin",children:"Uncle Bob"}),")."]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"./single-responsibility-principle",children:"Single-responsibility Principle (SRP)"})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"./open-closed-principle",children:"Open-closed Principle"})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"./liskov-substitution-principle",children:"Liskov Substitution Principle"})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"./interface-segregation-principle",children:"Interface segregation principle"})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"./dependency-inversion-principle",children:"Dependency inversion principle"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Inheritance is not code-sharing"}),"\n",(0,r.jsx)(i.li,{children:"Is a relationship"}),"\n",(0,r.jsx)(i.li,{children:"Need to share common logic"}),"\n",(0,r.jsx)(i.li,{children:"Sharing just properties or method signature is not enough"}),"\n",(0,r.jsx)(i.li,{children:"Inheritance can put you in a corner"}),"\n",(0,r.jsx)(i.li,{children:"What is the point?"}),"\n"]})]})}function a(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,i,n)=>{n.d(i,{Z:()=>c,a:()=>o});var r=n(67294);const t={},s=r.createContext(t);function o(e){const i=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);