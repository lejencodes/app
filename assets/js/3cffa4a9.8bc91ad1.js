"use strict";(self.webpackChunkapp_src=self.webpackChunkapp_src||[]).push([[4049],{3905:(e,n,r)=>{r.d(n,{Zo:()=>l,kt:()=>d});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=t.createContext({}),s=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},l=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},O={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=s(r),d=i,m=u["".concat(p,".").concat(d)]||u[d]||O[d]||o;return r?t.createElement(m,a(a({ref:n},l),{},{components:r})):t.createElement(m,a({ref:n},l))}));function d(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=u;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=r[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2280:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>O,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var t=r(7462),i=(r(7294),r(3905));const o={},a="SOLID",c={unversionedId:"Programming/Object-Oriented Design OOD/-SOLID",id:"Programming/Object-Oriented Design OOD/-SOLID",title:"SOLID",description:"SOLID is an acronym for the first five object-oriented design (OOD) principles by Robert C. Martin (also known",source:"@site/docs/Programming/Object-Oriented Design OOD/-SOLID.md",sourceDirName:"Programming/Object-Oriented Design OOD",slug:"/Programming/Object-Oriented Design OOD/-SOLID",permalink:"/docs/Programming/Object-Oriented Design OOD/-SOLID",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Object-Oriented-Design (OOD)",permalink:"/docs/category/object-oriented-design-ood"},next:{title:"Dependency inversion principle",permalink:"/docs/Programming/Object-Oriented Design OOD/Dependency inversion principle"}},p={},s=[],l={toc:s};function O(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"solid"},"SOLID"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"SOLID")," is an acronym for the first five object-oriented design (OOD) principles by Robert C. Martin (also known\nas ",(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Robert_Cecil_Martin"},"Uncle Bob"),")."),(0,i.kt)("p",null,"[","[Single-responsibility Principle (SRP)]","]\n[","[Open-closed Principle]","]\n[","[Liskov Substitution Principle]","]\n[","[Interface segregation principle]","]\n[","[Dependency inversion principle]","]"),(0,i.kt)("p",null,"Inheritance is not code-sharing\nIs a relationship\nNeed to share common logic\nSharing just properties or method signature is not enough\nInheritance can put you in a corner\nWhat is the point?"))}O.isMDXComponent=!0}}]);