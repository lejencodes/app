"use strict";(self.webpackChunkapp_src=self.webpackChunkapp_src||[]).push([[4862],{3905:(e,t,s)=>{s.d(t,{Zo:()=>h,kt:()=>d});var n=s(67294);function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function i(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function o(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?i(Object(s),!0).forEach((function(t){r(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):i(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function a(e,t){if(null==e)return{};var s,n,r=function(e,t){if(null==e)return{};var s,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)s=i[n],t.indexOf(s)>=0||(r[s]=e[s]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)s=i[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(r[s]=e[s])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),s=t;return e&&(s="function"==typeof e?e(t):o(o({},t),e)),s},h=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var s=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,h=a(e,["components","mdxType","originalType","parentName"]),p=l(s),d=r,f=p["".concat(c,".").concat(d)]||p[d]||u[d]||i;return s?n.createElement(f,o(o({ref:t},h),{},{components:s})):n.createElement(f,o({ref:t},h))}));function d(e,t){var s=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=s.length,o=new Array(i);o[0]=p;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,o[1]=a;for(var l=2;l<i;l++)o[l]=s[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,s)}p.displayName="MDXCreateElement"},74990:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var n=s(87462),r=(s(67294),s(3905));const i={id:"dotnet-nunit-assert",title:"Dotnet Nunit Assert",tags:["dotnet"]},o=void 0,a={unversionedId:"dotnet/dotnet-nunit-assert",id:"dotnet/dotnet-nunit-assert",title:"Dotnet Nunit Assert",description:"[Dotnet test]",source:"@site/docs/dotnet/dotnet-nunit-assert.md",sourceDirName:"dotnet",slug:"/dotnet/dotnet-nunit-assert",permalink:"/app/docs/dotnet/dotnet-nunit-assert",draft:!1,tags:[{label:"dotnet",permalink:"/app/docs/tags/dotnet"}],version:"current",frontMatter:{id:"dotnet-nunit-assert",title:"Dotnet Nunit Assert",tags:["dotnet"]},sidebar:"tutorialSidebar",previous:{title:"Dotnet For Each With Index",permalink:"/app/docs/dotnet/dotnet-for-each-with-index"},next:{title:"Dotnet Test Command",permalink:"/app/docs/dotnet/dotnet-test-command"}},c={},l=[],h={toc:l};function u(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,n.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"./dotnet-test-command"},"[Dotnet test]")),(0,r.kt)("h1",{id:"nunit-assert"},"Nunit Assert"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'Assert.AreEqual(28, _actualFuel); // Tests whether the specified values are equal.\nAssert.AreNotEqual(28, _actualFuel); // Tests whether the specified values are unequal. Same as AreEqual for numeric values.\nAssert.AreSame(_expectedRocket, _actualRocket); // Tests whether the specified objects both refer to the same object\nAssert.AreNotSame(_expectedRocket, _actualRocket); // Tests whether the specified objects refer to different objects\nAssert.IsTrue(_isThereEnoughFuel); // Tests whether the specified condition is true\nAssert.IsFalse(_isThereEnoughFuel); // Tests whether the specified condition is false\nAssert.IsNull(_actualRocket); // Tests whether the specified object is null\nAssert.IsNotNull(_actualRocket); // Tests whether the specified object is non-null\nAssert.IsInstanceOf(_actualRocket, typeof(Falcon9Rocket)); // Tests whether the specified object is an instance of the expected type\nAssert.IsNotInstanceOf(_actualRocket, typeof(Falcon9Rocket)); // Tests whether the specified object is not an instance of type\nStringAssert.AreEqualIgnoringCase(_expectedBellatrixTitle, "Bellatrix"); // Tests whether the specified strings are equal ignoring their casing\nStringAssert.Contains(_expectedBellatrixTitle, "Bellatrix"); // Tests whether the specified string contains the specified substring\nStringAssert.DoesNotContain(_expectedBellatrixTitle, "Bellatrix"); // Tests whether the specified string doesn\'t contain the specified substring\nStringAssert.StartsWith(_expectedBellatrixTitle, "Bellatrix"); // Tests whether the specified string begins with the specified substring\nStringAssert.StartsWith(_expectedBellatrixTitle, "Bellatrix"); // Tests whether the specified string begins with the specified substring\nStringAssert.IsMatch("(281)388-0388", @"(?d{3})?-? *d{3}-? *-?d{4}"); // Tests whether the specified string matches a regular expression\nStringAssert.DoesNotMatch("281)388-0388", @"(?d{3})?-? *d{3}-? *-?d{4}"); // Tests whether the specified string does not match a regular expression\nCollectionAssert.AreEqual(_expectedRockets, _actualRockets); // Tests whether the specified collections have the same elements in the same order and quantity.\nCollectionAssert.AreNotEqual(_expectedRockets, _actualRockets); // Tests whether the specified collections does not have the same elements or the elements are in a different order and quantity.\nCollectionAssert.AreEquivalent(_expectedRockets, _actualRockets); // Tests whether two collections contain the same elements.\nCollectionAssert.AreNotEquivalent(_expectedRockets, _actualRockets); // Tests whether two collections contain different elements.\nCollectionAssert.AllItemsAreInstancesOfType(_expectedRockets, _actualRockets); // Tests whether all elements in the specified collection are instances of the expected type\nCollectionAssert.AllItemsAreNotNull(_expectedRockets); // Tests whether all items in the specified collection are non-null\nCollectionAssert.AllItemsAreUnique(_expectedRockets); // Tests whether all items in the specified collection are unique\nCollectionAssert.Contains(_actualRockets, falcon9); // Tests whether the specified collection contains the specified element\nCollectionAssert.DoesNotContain(_actualRockets, falcon9); // Tests whether the specified collection does not contain the specified element\nCollectionAssert.IsSubsetOf(_expectedRockets, _actualRockets); // Tests whether one collection is a subset of another collection\nCollectionAssert.IsNotSubsetOf(_expectedRockets, _actualRockets); // Tests whether one collection is not a subset of another collection\nAssert.Throws<ArgumentNullException>(() => new Regex(null)); // Tests whether the code specified by delegate throws exact given exception of type T\n\nAssert.That(28, Is.EqualTo(_actualFuel)); // Tests whether the specified values are equal.\nAssert.That(28, Is.Not.EqualTo(_actualFuel)); // Tests whether the specified values are unequal. Same as AreEqual for numeric values.\nAssert.That(_expectedRocket, Is.SameAs(_actualRocket)); // Tests whether the specified objects both refer to the same object\nAssert.That(_expectedRocket, Is.Not.SameAs(_actualRocket)); // Tests whether the specified objects refer to different objects\nAssert.That(_isThereEnoughFuel, Is.True); // Tests whether the specified condition is true\nAssert.That(_isThereEnoughFuel, Is.False); // Tests whether the specified condition is false\nAssert.That(_actualRocket, Is.Null); // Tests whether the specified object is null\nAssert.That(_actualRocket, Is.Not.Null); // Tests whether the specified object is non-null\nAssert.That(_actualRocket, Is.InstanceOf<Falcon9Rocket>()); // Tests whether the specified object is an instance of the expected type\nAssert.That(_actualRocket, Is.Not.InstanceOf<Falcon9Rocket>()); // Tests whether the specified object is not an instance of type\nAssert.That(_actualFuel, Is.GreaterThan(20)); // Tests whether the specified object greater than the specified value\n\nAssert.That(28, Is.EqualTo(_actualFuel).Within(0.50));\n// Tests whether the specified values are nearly equal within the specified tolerance.\nAssert.That(28, Is.EqualTo(_actualFuel).Within(2).Percent);\n// Tests whether the specified values are nearly equal within the specified % tolerance.\nAssert.That(_actualRocketParts, Has.Exactly(10).Items);\n// Tests whether the specified collection has exactly the stated number of items in it.\nAssert.That(_actualRocketParts, Is.Unique);\n// Tests whether the items in the specified collections are unique.\nAssert.That(_actualRocketParts, Does.Contain(_expectedRocketPart));\n// Tests whether a given items is present in the specified list of items.\nAssert.That(_actualRocketParts, Has.Exactly(1).Matches<RocketPart>(part => part.Name == "Door" && part.Height == "200"));\n\n// Tests whether the specified collection has exactly the stated item in it.\n\n')))}u.isMDXComponent=!0}}]);