"use strict";(self.webpackChunkapp_src=self.webpackChunkapp_src||[]).push([[9704],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,h=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8525:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={id:"Git",title:"Git",tags:["Git"]},i=void 0,l={unversionedId:"Dev Notes/Tools/Git",id:"Dev Notes/Tools/Git",title:"Git",description:"Git Worktree",source:"@site/docs/Dev Notes/Tools/Git.md",sourceDirName:"Dev Notes/Tools",slug:"/Dev Notes/Tools/Git",permalink:"/docs/Dev Notes/Tools/Git",draft:!1,tags:[{label:"Git",permalink:"/docs/tags/git"}],version:"current",frontMatter:{id:"Git",title:"Git",tags:["Git"]},sidebar:"tutorialSidebar",previous:{title:"Git Worktree",permalink:"/docs/Dev Notes/Tools/Git Worktree"},next:{title:"Rider Multicursor Mac",permalink:"/docs/Dev Notes/Tools/Rider-Multicursor"}},c={},s=[{value:"Before doing a PR - clean up own branch",id:"before-doing-a-pr---clean-up-own-branch",level:2},{value:"Git delete local branch and remote",id:"git-delete-local-branch-and-remote",level:2},{value:"A new start?!",id:"a-new-start",level:2},{value:"Hard reset",id:"hard-reset",level:2},{value:"Remove commit",id:"remove-commit",level:2},{value:"View git aliases",id:"view-git-aliases",level:2},{value:"Cherry Pick",id:"cherry-pick",level:2},{value:"This command deletes branch references to remote branches that do not exist.",id:"this-command-deletes-branch-references-to-remote-branches-that-do-not-exist",level:2},{value:"To see local branches, run this command:",id:"to-see-local-branches-run-this-command",level:2},{value:"To see remote branches, run this command:",id:"to-see-remote-branches-run-this-command",level:2},{value:"To see all local and remote branches, run this command:",id:"to-see-all-local-and-remote-branches-run-this-command",level:2},{value:"Update fork of github",id:"update-fork-of-github",level:2},{value:"Git Clone Sub-folder",id:"git-clone-sub-folder",level:2},{value:"Create branch from",id:"create-branch-from",level:2},{value:"Multiple credential setup .gitconfig",id:"multiple-credential-setup-gitconfig",level:2},{value:"List Git Config",id:"list-git-config",level:2}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/Dev%20Notes/Tools/Git%20Worktree"},"Git Worktree"),"\n",(0,o.kt)("a",{parentName:"p",href:"/docs/Dev%20Notes/Tools/Git-Multiple-Repo"},"Git Multiple Repo")),(0,o.kt)("h1",{id:"git"},"Git"),(0,o.kt)("h2",{id:"before-doing-a-pr---clean-up-own-branch"},"Before doing a PR - clean up own branch"),(0,o.kt)("p",null,"Simply stay in uglyCommitBranch and do an interactive rebase: clean your commits there, and the force push that branch:\nyour pull-request (if it existed before the rebase, a PR made from that branch) will update itself."),(0,o.kt)("p",null,"If there was no pull request yet, you still can push --force as long as nobody else was working on uglyCommitBranch (\nsince it is your fork)."),(0,o.kt)("p",null,"That being said, if you want to stay in newFeature branch, then:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git merge --squash uglyCommitBranch\n")),(0,o.kt)("h2",{id:"git-delete-local-branch-and-remote"},"Git delete local branch and remote"),(0,o.kt)("p",null,"Delete a branch with :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git branch -d <branch>\n")),(0,o.kt)("p",null,"delete a branch remotely:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git push <remote> --delete <branch>\n")),(0,o.kt)("h2",{id:"a-new-start"},"A new start?!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'git reset $(git commit-tree HEAD^{tree} -m "A new start")\n\n')),(0,o.kt)("p",null,"Variation: New Repo from a Project Template"),(0,o.kt)("p",null,'This is useful to create the "initial commit" in a new project using another repository as the\ntemplate/archetype/seed/skeleton. For example:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'cd my-new-project\n\ngit init\n\ngit fetch --depth=1 -n https://github.com/toolbear/panda.git\n\ngit reset --hard $(git commit-tree FETCH_HEAD^{tree} -m "initial commit")\n')),(0,o.kt)("h2",{id:"hard-reset"},"Hard reset"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git fetch origin\n\ngit reset --hard origin/integration\n")),(0,o.kt)("h2",{id:"remove-commit"},"Remove commit"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git rm --cached <file_to_remove_from_commit_<commit_id>_which_added_file>\n\ngit reset --soft HEAD~1\n")),(0,o.kt)("h2",{id:"view-git-aliases"},"View git aliases"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'git config --get-regexp ^alias\\.\n\ngit config --global alias.alias "config --get-regexp ^alias\\."\n\ngit config --global alias.st status\n')),(0,o.kt)("h2",{id:"cherry-pick"},"Cherry Pick"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git fetch ssh://git@stash.mycompany.com:7999/repo_to_get_it_from.git branchToPickFrom && git cherry-pick 02a197e9533\n\ngit fetch [branch URL] [Branch to cherry-pick from] && git cherry-pick [commit ID]\n")),(0,o.kt)("h2",{id:"this-command-deletes-branch-references-to-remote-branches-that-do-not-exist"},"This command deletes branch references to remote branches that do not exist."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git remote prune origin\n")),(0,o.kt)("h2",{id:"to-see-local-branches-run-this-command"},"To see local branches, run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git branch\n")),(0,o.kt)("h2",{id:"to-see-remote-branches-run-this-command"},"To see remote branches, run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git branch -r\n")),(0,o.kt)("h2",{id:"to-see-all-local-and-remote-branches-run-this-command"},"To see all local and remote branches, run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git branch -a\n")),(0,o.kt)("h2",{id:"update-fork-of-github"},"Update fork of github"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Option 2 - GitHub CLI")),(0,o.kt)("p",null,"To update the remote fork from its parent, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"gh repo sync")," subcommand and supply your fork name as argument."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ gh repo sync owner/cli-fork\n")),(0,o.kt)("p",null,"If the changes from the upstream repository cause conflict then the GitHub CLI can't sync. You can set the ",(0,o.kt)("inlineCode",{parentName:"p"},"-force")," flag\nto overwrite the destination branch."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/cli/cli#installation"},"How to Install GitHub CLI")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://cli.github.com/manual/"},"GitHub CLI Manual"))),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Option 3 - Command Line")),(0,o.kt)("p",null,"Before syncing one's fork with an upstream repository, one\nmust ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/configuring-a-remote-for-a-fork"},"configure a remote that points to the upstream repository"),"\nin Git."),(0,o.kt)("p",null,"1 Open Git Bash."),(0,o.kt)("p",null,"2 Change the current working directory to your local project."),(0,o.kt)("p",null,"3 Fetch the branches and their respective commits from the upstream repository. Commits to BRANCHNAME will be stored in\nthe local branch upstream/BRANCHNAME."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ git fetch upstream\n> remote: Counting objects: 75, done.\n> remote: Compressing objects: 100% (53/53), done.\n> remote: Total 62 (delta 27), reused 44 (delta 9)\n> Unpacking objects: 100% (62/62), done.\n> From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY\n>  * [new branch]      main     -> upstream/main\n")),(0,o.kt)("p",null,"4 Check out your fork's local default branch - in this case, we use main."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ git checkout main\n> Switched to branch 'main'\n")),(0,o.kt)("p",null,"5 Merge the changes from the upstream default branch - in this case, upstream/main - into your local default branch.\nThis brings your fork's default branch into sync with the upstream repository, without losing your local changes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ git merge upstream/main\n> Updating a422352..5fdff0f\n> Fast-forward\n>  README                    |    9 -------\n>  README.md                 |    7 ++++++\n>  2 files changed, 7 insertions(+), 9 deletions(-)\n>  delete mode 100644 README\n>  create mode 100644 README.md\n")),(0,o.kt)("p",null,"If one's local branch didn't have any unique commits, Git will instead perform a \"fast-forward\":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ git merge upstream/main\n> Updating 34e91da..16c56ad\n> Fast-forward\n>  README.md                 |    5 +++--\n>  1 file changed, 3 insertions(+), 2 deletions(-)\n")),(0,o.kt)("h2",{id:"git-clone-sub-folder"},"Git Clone Sub-folder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"1.  Navigate to the folder where you'd like to clone the subdirectory.\n2.  Open `cmd` and run the following commands.\n\ngit clone --filter=blob:none --sparse %your-git-repo-url%\ngit sparse-checkout add %subdirectory-to-be-cloned%\ncd %your-subdirectory%\n")),(0,o.kt)("p",null,"Voila! Now you have cloned only the subdirectory that you want!"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Explanation - What are these commands doing really?")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git clone --filter=blob:none --sparse %your-git-repo-url%\n")),(0,o.kt)("p",null,"In the above command,"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--filter=blob:none")," => You tell git that you only want to clone the metadata files. This way git collects the basic\nbranch details and other meta from remote, which will ensure that your future checkouts from origin are smooth."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--sparse")," => Tell git that this is a sparse clone. Git will checkout only the root directory in this case.")),(0,o.kt)("p",null,"Now git is informed with the metadata and ready to checkout any subdirectories/files that you want to work with."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git sparse-checkout add gui-workspace ==> Checkout folder\n\ngit sparse-checkout add gui-workspace/assets/logo.png ==> Checkout a file\n")),(0,o.kt)("h2",{id:"create-branch-from"},"Create branch from"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git checkout -b new-branch from-branch\n")),(0,o.kt)("h2",{id:"multiple-credential-setup-gitconfig"},"Multiple credential setup .gitconfig"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="~/.gitconfig',title:'"~/.gitconfig'},'[user]\n    name = lejencodes\n    email = lejencodes@gmail.com\n[includeIf "gitdir:~/workspace/gitlab-coffeecodes/"]\n    path = ~/workspace/gitlab-coffeecodes/.gitconfig\n[credential]\n    helper = cache\n    helper = /usr/bin/git-credential-manager-core\n    credentialStore = cache\n    cacheOptions = --timeout 300\n[submodule]\n    recurse = true\n[credential "https://dev.azure.com"]\n    useHttpPath = true\n[core]\n    autocrlf = input\n[cola]\n    spellcheck = false\n')),(0,o.kt)("h2",{id:"list-git-config"},"List Git Config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git config --list\n")),(0,o.kt)("p",null,"Use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git config --list --show-origin\n")),(0,o.kt)("p",null,"to see where that setting is defined (global, user, repo, etc...)"))}u.isMDXComponent=!0}}]);