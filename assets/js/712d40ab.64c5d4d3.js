"use strict";(self.webpackChunkapp_src=self.webpackChunkapp_src||[]).push([[9714],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=p(n),f=a,m=u["".concat(l,".").concat(f)]||u[f]||s[f]||o;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7338:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={id:"dotnet-for-each-with-index",title:"Dotnet For Each With Index",tags:["C#"]},i=void 0,c={unversionedId:"dotnet/dotnet-for-each-with-index",id:"dotnet/dotnet-for-each-with-index",title:"Dotnet For Each With Index",description:"[CSharp]",source:"@site/docs/dotnet/dotnet-for-each-with-index.md",sourceDirName:"dotnet",slug:"/dotnet/dotnet-for-each-with-index",permalink:"/docs/dotnet/dotnet-for-each-with-index",draft:!1,tags:[{label:"C#",permalink:"/docs/tags/c"}],version:"current",frontMatter:{id:"dotnet-for-each-with-index",title:"Dotnet For Each With Index",tags:["C#"]},sidebar:"tutorialSidebar",previous:{title:"Dotnet Add Source",permalink:"/docs/dotnet/dotnet-add-source"},next:{title:"Dotnet Nunit Assert",permalink:"/docs/dotnet/dotnet-nunit-assert"}},l={},p=[{value:"Sample Code",id:"sample-code",level:2}],d={toc:p};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"CSharp"},"[CSharp]")),(0,a.kt)("h2",{id:"sample-code"},"Sample Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'foreach(var item in filterValue.Select((value, i) =>new {\n  i,\n  value\n}))\n\n{\n\n  var value = item.value;\n\n  var index = item.i;\n\n}\n\n[Test]\n\npublic void GetApiObjectName()\n\n{\n\n  var list = At.ApiService.Object.GetObjectByType(ObjType.ObjectType, 0, 0);\n\n  var filtered = list.Data.Where(x =>x.ref_id == abc);\n\n  var enumerable = filtered as Obj[] ? ?filtered.ToArray();\n\n  // var listdata = enumerable.ToList();\n  foreach(var name in enumerable.ToList())\n\n  {\n\n    Console.WriteLine(name.display_name);\n\n    Console.WriteLine(name.ref_id);\n\n  }\n\n  // var singleString = string.Join(",", enumerable.ToArray() );\n}\n')))}s.isMDXComponent=!0}}]);