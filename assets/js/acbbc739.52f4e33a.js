"use strict";(self.webpackChunkapp_src=self.webpackChunkapp_src||[]).push([[1395],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,g=p["".concat(i,".").concat(m)]||p[m]||c[m]||o;return n?r.createElement(g,l(l({ref:t},d),{},{components:n})):r.createElement(g,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3586:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={tags:["deluge"]},l=void 0,s={unversionedId:"Dev Notes/OS/pi/deluge",id:"Dev Notes/OS/pi/deluge",title:"deluge",description:"[[deluge]]",source:"@site/docs/Dev Notes/OS/pi/deluge.md",sourceDirName:"Dev Notes/OS/pi",slug:"/Dev Notes/OS/pi/deluge",permalink:"/docs/Dev Notes/OS/pi/deluge",draft:!1,tags:[{label:"deluge",permalink:"/docs/tags/deluge"}],version:"current",frontMatter:{tags:["deluge"]},sidebar:"tutorialSidebar",previous:{title:"NordVPN",permalink:"/docs/Dev Notes/OS/pi/NordVPN"},next:{title:"pi setup",permalink:"/docs/Dev Notes/OS/pi/pi-setup"}},i={},u=[],d={toc:u};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"[","[deluge]","]"),(0,a.kt)("h1",{id:"fix-if-web-ui-doesnt-connect-automatically-to-daemon"},"Fix if Web Ui doesn't connect Automatically to Daemon"),(0,a.kt)("p",null,"Set 127.0.0.1:58846 as default daemon"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\nchmod 444 ~/.config/deluge/web.conf\n\nreboot\n\n")),(0,a.kt)("p",null,"Deluged (the background daemon) ships as disabled so we need to enable it before proceeding:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\nsudo nano /etc/default/deluged\n\n")),(0,a.kt)("p",null,"and change ENABLE_DELUGED=0 to ENABLE_DELUGED=1"),(0,a.kt)("p",null,"OSMC uses systemd instead of the older init.d method of starting services, so lets use that to deal with starting things\nautomatically at boot time, it will make managing things easier later on."),(0,a.kt)("p",null,"Firstly, delete the old way to prevent future confusion:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\nsudo update-rc.d deluged remove\n\nsudo rm /etc/init.d/deluged\n\n")),(0,a.kt)("p",null,"Then create a systemd unit as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\nsudo nano /etc/systemd/system/deluged.service\n\n")),(0,a.kt)("p",null,"and add the following text:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"\n[Unit]\n\nDescription = Deluge Bittorent Daemon\n\nAfter = network-online.target\n\n\n\n[Service]\n\nType = simple\n\nUser = debian-deluged\n\nGroup = debian-deluged\n\nUMask = 007\n\nExecStart = /usr/bin/deluged -d\n\nRestart = on-failure\n\n\n\n# Configures the time to wait before service is stopped forcefully.\n\nTimeoutStopSec = 300\n\n\n[Install]\n\nWantedBy = multi-user.target\n\n")),(0,a.kt)("p",null,"Finally for this step systemd needs to be made aware of the new files and then reloaded to pick up the new unit."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\nsudo systemctl daemon-reload\n\nsudo systemctl enable deluged.service\n\n")),(0,a.kt)("p",null,"The daemon can now be started with sudo systemctl start deluged and will run automatically when the machine boots up,\nalthough we need to configure a few things before it will work correctly:"))}c.isMDXComponent=!0}}]);