"use strict";(self.webpackChunkapp_src=self.webpackChunkapp_src||[]).push([[5877],{40753:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var n=s(85893),i=s(11151);const o={id:"dotnet-nunit-assert",title:"Dotnet Nunit Assert",tags:["dotnet"]},c="Nunit Assert",a={id:"programming/dotnet/dotnet-nunit-assert",title:"Dotnet Nunit Assert",description:"[Dotnet test]",source:"@site/docs/programming/dotnet/dotnet-nunit-assert.md",sourceDirName:"programming/dotnet",slug:"/programming/dotnet/dotnet-nunit-assert",permalink:"/docs/programming/dotnet/dotnet-nunit-assert",draft:!1,unlisted:!1,tags:[{label:"dotnet",permalink:"/docs/tags/dotnet"}],version:"current",frontMatter:{id:"dotnet-nunit-assert",title:"Dotnet Nunit Assert",tags:["dotnet"]},sidebar:"docsSidebar",previous:{title:"Dotnet For Each With Index",permalink:"/docs/programming/dotnet/dotnet-for-each-with-index"},next:{title:"Dotnet Test Command",permalink:"/docs/programming/dotnet/dotnet-test-command"}},r={},l=[];function h(e){const t={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"./dotnet-test-command",children:"[Dotnet test]"})}),"\n",(0,n.jsx)(t.h1,{id:"nunit-assert",children:"Nunit Assert"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cs",children:'Assert.AreEqual(28, _actualFuel); // Tests whether the specified values are equal.\nAssert.AreNotEqual(28, _actualFuel); // Tests whether the specified values are unequal. Same as AreEqual for numeric values.\nAssert.AreSame(_expectedRocket, _actualRocket); // Tests whether the specified objects both refer to the same object\nAssert.AreNotSame(_expectedRocket, _actualRocket); // Tests whether the specified objects refer to different objects\nAssert.IsTrue(_isThereEnoughFuel); // Tests whether the specified condition is true\nAssert.IsFalse(_isThereEnoughFuel); // Tests whether the specified condition is false\nAssert.IsNull(_actualRocket); // Tests whether the specified object is null\nAssert.IsNotNull(_actualRocket); // Tests whether the specified object is non-null\nAssert.IsInstanceOf(_actualRocket, typeof(Falcon9Rocket)); // Tests whether the specified object is an instance of the expected type\nAssert.IsNotInstanceOf(_actualRocket, typeof(Falcon9Rocket)); // Tests whether the specified object is not an instance of type\nStringAssert.AreEqualIgnoringCase(_expectedBellatrixTitle, "Bellatrix"); // Tests whether the specified strings are equal ignoring their casing\nStringAssert.Contains(_expectedBellatrixTitle, "Bellatrix"); // Tests whether the specified string contains the specified substring\nStringAssert.DoesNotContain(_expectedBellatrixTitle, "Bellatrix"); // Tests whether the specified string doesn\'t contain the specified substring\nStringAssert.StartsWith(_expectedBellatrixTitle, "Bellatrix"); // Tests whether the specified string begins with the specified substring\nStringAssert.StartsWith(_expectedBellatrixTitle, "Bellatrix"); // Tests whether the specified string begins with the specified substring\nStringAssert.IsMatch("(281)388-0388", @"(?d{3})?-? *d{3}-? *-?d{4}"); // Tests whether the specified string matches a regular expression\nStringAssert.DoesNotMatch("281)388-0388", @"(?d{3})?-? *d{3}-? *-?d{4}"); // Tests whether the specified string does not match a regular expression\nCollectionAssert.AreEqual(_expectedRockets, _actualRockets); // Tests whether the specified collections have the same elements in the same order and quantity.\nCollectionAssert.AreNotEqual(_expectedRockets, _actualRockets); // Tests whether the specified collections does not have the same elements or the elements are in a different order and quantity.\nCollectionAssert.AreEquivalent(_expectedRockets, _actualRockets); // Tests whether two collections contain the same elements.\nCollectionAssert.AreNotEquivalent(_expectedRockets, _actualRockets); // Tests whether two collections contain different elements.\nCollectionAssert.AllItemsAreInstancesOfType(_expectedRockets, _actualRockets); // Tests whether all elements in the specified collection are instances of the expected type\nCollectionAssert.AllItemsAreNotNull(_expectedRockets); // Tests whether all items in the specified collection are non-null\nCollectionAssert.AllItemsAreUnique(_expectedRockets); // Tests whether all items in the specified collection are unique\nCollectionAssert.Contains(_actualRockets, falcon9); // Tests whether the specified collection contains the specified element\nCollectionAssert.DoesNotContain(_actualRockets, falcon9); // Tests whether the specified collection does not contain the specified element\nCollectionAssert.IsSubsetOf(_expectedRockets, _actualRockets); // Tests whether one collection is a subset of another collection\nCollectionAssert.IsNotSubsetOf(_expectedRockets, _actualRockets); // Tests whether one collection is not a subset of another collection\nAssert.Throws<ArgumentNullException>(() => new Regex(null)); // Tests whether the code specified by delegate throws exact given exception of type T\n\nAssert.That(28, Is.EqualTo(_actualFuel)); // Tests whether the specified values are equal.\nAssert.That(28, Is.Not.EqualTo(_actualFuel)); // Tests whether the specified values are unequal. Same as AreEqual for numeric values.\nAssert.That(_expectedRocket, Is.SameAs(_actualRocket)); // Tests whether the specified objects both refer to the same object\nAssert.That(_expectedRocket, Is.Not.SameAs(_actualRocket)); // Tests whether the specified objects refer to different objects\nAssert.That(_isThereEnoughFuel, Is.True); // Tests whether the specified condition is true\nAssert.That(_isThereEnoughFuel, Is.False); // Tests whether the specified condition is false\nAssert.That(_actualRocket, Is.Null); // Tests whether the specified object is null\nAssert.That(_actualRocket, Is.Not.Null); // Tests whether the specified object is non-null\nAssert.That(_actualRocket, Is.InstanceOf<Falcon9Rocket>()); // Tests whether the specified object is an instance of the expected type\nAssert.That(_actualRocket, Is.Not.InstanceOf<Falcon9Rocket>()); // Tests whether the specified object is not an instance of type\nAssert.That(_actualFuel, Is.GreaterThan(20)); // Tests whether the specified object greater than the specified value\n\nAssert.That(28, Is.EqualTo(_actualFuel).Within(0.50));\n// Tests whether the specified values are nearly equal within the specified tolerance.\nAssert.That(28, Is.EqualTo(_actualFuel).Within(2).Percent);\n// Tests whether the specified values are nearly equal within the specified % tolerance.\nAssert.That(_actualRocketParts, Has.Exactly(10).Items);\n// Tests whether the specified collection has exactly the stated number of items in it.\nAssert.That(_actualRocketParts, Is.Unique);\n// Tests whether the items in the specified collections are unique.\nAssert.That(_actualRocketParts, Does.Contain(_expectedRocketPart));\n// Tests whether a given items is present in the specified list of items.\nAssert.That(_actualRocketParts, Has.Exactly(1).Matches<RocketPart>(part => part.Name == "Door" && part.Height == "200"));\n\n// Tests whether the specified collection has exactly the stated item in it.\n\n'})})]})}function d(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>a,a:()=>c});var n=s(67294);const i={},o=n.createContext(i);function c(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);