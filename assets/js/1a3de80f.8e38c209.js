"use strict";(self.webpackChunkapp_src=self.webpackChunkapp_src||[]).push([[3556],{3905:(e,r,n)=>{n.d(r,{Zo:()=>s,kt:()=>m});var t=n(67294);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function p(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,t,i=function(e,r){if(null==e)return{};var n,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(i[n]=e[n]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=t.createContext({}),c=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):p(p({},r),e)),n},s=function(e){var r=c(e.components);return t.createElement(l.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?t.createElement(g,p(p({ref:r},s),{},{components:n})):t.createElement(g,p({ref:r},s))}));function m(e,r){var n=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=n.length,p=new Array(o);p[0]=u;var a={};for(var l in r)hasOwnProperty.call(r,l)&&(a[l]=r[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,p[1]=a;for(var c=2;c<o;c++)p[c]=n[c];return t.createElement.apply(null,p)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},92963:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>p,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var t=n(87462),i=(n(67294),n(3905));const o={id:"solid-principle",title:"Solid Principle",tags:["solid"]},p=void 0,a={unversionedId:"programming/object-oriented-design/solid-principle",id:"programming/object-oriented-design/solid-principle",title:"Solid Principle",description:"SOLID is an acronym for the first five object-oriented design (OOD) principles by Robert C. Martin (also known",source:"@site/docs/programming/object-oriented-design/solid-principle.md",sourceDirName:"programming/object-oriented-design",slug:"/programming/object-oriented-design/solid-principle",permalink:"/app/docs/programming/object-oriented-design/solid-principle",draft:!1,tags:[{label:"solid",permalink:"/app/docs/tags/solid"}],version:"current",frontMatter:{id:"solid-principle",title:"Solid Principle",tags:["solid"]},sidebar:"tutorialSidebar",previous:{title:"Single Responsibility Principle",permalink:"/app/docs/programming/object-oriented-design/single-responsibility-principle"},next:{title:"Rancher Desktop",permalink:"/app/docs/category/rancher-desktop"}},l={},c=[],s={toc:c};function d(e){let{components:r,...n}=e;return(0,i.kt)("wrapper",(0,t.Z)({},s,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"SOLID")," is an acronym for the first five object-oriented design (OOD) principles by Robert C. Martin (also known\nas ",(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Robert_Cecil_Martin"},"Uncle Bob"),")."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"./single-responsibility-principle"},"Single-responsibility Principle (SRP)")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"./open-closed-principle"},"Open-closed Principle")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"./liskov-substitution-principle"},"Liskov Substitution Principle")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"./interface-segregation-principle"},"Interface segregation principle")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"./dependency-inversion-principle"},"Dependency inversion principle")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Inheritance is not code-sharing"),(0,i.kt)("li",{parentName:"ul"},"Is a relationship"),(0,i.kt)("li",{parentName:"ul"},"Need to share common logic"),(0,i.kt)("li",{parentName:"ul"},"Sharing just properties or method signature is not enough"),(0,i.kt)("li",{parentName:"ul"},"Inheritance can put you in a corner"),(0,i.kt)("li",{parentName:"ul"},"What is the point?")))}d.isMDXComponent=!0}}]);