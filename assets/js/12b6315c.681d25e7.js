"use strict";(self.webpackChunkapp_src=self.webpackChunkapp_src||[]).push([[2088],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1224:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const l={id:"generate-self-signing-cert",title:"Generate Self Signing Cert",description:"Generate Self Signing Cert",tags:["cert","bitwarden","vaultwarden"]},o=void 0,i={unversionedId:"homelab/generate-self-signing-cert",id:"homelab/generate-self-signing-cert",title:"Generate Self Signing Cert",description:"Generate Self Signing Cert",source:"@site/docs/homelab/generate-self-signing-cert.md",sourceDirName:"homelab",slug:"/homelab/generate-self-signing-cert",permalink:"/app/docs/homelab/generate-self-signing-cert",draft:!1,tags:[{label:"cert",permalink:"/app/docs/tags/cert"},{label:"bitwarden",permalink:"/app/docs/tags/bitwarden"},{label:"vaultwarden",permalink:"/app/docs/tags/vaultwarden"}],version:"current",frontMatter:{id:"generate-self-signing-cert",title:"Generate Self Signing Cert",description:"Generate Self Signing Cert",tags:["cert","bitwarden","vaultwarden"]},sidebar:"tutorialSidebar",previous:{title:"Financial",permalink:"/app/docs/financial/"},next:{title:"Homelab Hardware",permalink:"/app/docs/homelab/homelab-hardware"}},s={},p=[{value:"Install Prerequisites",id:"install-prerequisites",level:3},{value:"Install GPG key",id:"install-gpg-key",level:3},{value:"Install Repository",id:"install-repository",level:3},{value:"Install Docker",id:"install-docker",level:3},{value:"Enable at boot and start docker daemon",id:"enable-at-boot-and-start-docker-daemon",level:3},{value:"Docker compose",id:"docker-compose",level:3},{value:"Add SSL Certificate",id:"add-ssl-certificate",level:3},{value:"Edit lighttpd.conf",id:"edit-lighttpdconf",level:3},{value:"Custom MOTD",id:"custom-motd",level:3}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Check logs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-undefined"},"journalctl -u vaultwarden.service\n")),(0,a.kt)("p",null,"Restart nginx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-undefined"},"systemctl restart nginx.service\n")),(0,a.kt)("p",null,"Check port listening"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"ss -tulpn | grep LISTEN\n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"on RPi 2 I was going to disable HTTPS on vaultwarden")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"nano /mnt/dietpi_userdata/vaultwarden/vaultwarden.env")),(0,a.kt)("ol",{start:6},(0,a.kt)("li",{parentName:"ol"},"disable TLS")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},'#ROCKET_TLS={certs="./cert.pem",key="./privkey.pem"}')),(0,a.kt)("ol",{start:7},(0,a.kt)("li",{parentName:"ol"},"next to this I enabled websocket notifications")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"WEBSOCKET_ENABLED=true WEBSOCKET_ADDRESS=0.0.0.0 WEBSOCKET_PORT=3012")),(0,a.kt)("ol",{start:8},(0,a.kt)("li",{parentName:"ol"},"save the file and restart the service")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"systemctl restart vaultwarden.service")),(0,a.kt)("ol",{start:9},(0,a.kt)("li",{parentName:"ol"},"vaultwarden is reachable on HTTP now")),(0,a.kt)("p",null,"ROCKET_PORT and ROCKET_TLS are the parameter used to specify HTTP/S port + SSL certificate used by vaultwarden to enable SSL access. If you have any question for these parameter you might need to reach out to vaultwarden developer to get some deeper explanation."),(0,a.kt)("h3",{id:"install-prerequisites"},"Install Prerequisites"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt -y install apt-transport-https ca-certificates curl gnupg2 software-properties-common\n")),(0,a.kt)("h3",{id:"install-gpg-key"},"Install GPG key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"sudo mkdir -p /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n")),(0,a.kt)("h3",{id:"install-repository"},"Install Repository"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n')),(0,a.kt)("h3",{id:"install-docker"},"Install Docker"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n")),(0,a.kt)("h3",{id:"enable-at-boot-and-start-docker-daemon"},"Enable at boot and start docker daemon"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"sudo systemctl enable docker\nsudo systemctl start docker\n")),(0,a.kt)("h3",{id:"docker-compose"},"Docker compose"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3.8"\nservices:\n  nginx-proxy-manager:\n    image: jc21/nginx-proxy-manager:latest\n    container_name: nginx-proxy-manager\n    ports:\n      - 80:80\n      - 81:81\n      - 443:443\n    volumes:\n      - ./nginx/data:/data\n      - ./nginx/letsencrypt:/etc/letsencrypt\n    restart: unless-stopped\n  jellyfin:\n    image: lscr.io/linuxserver/jellyfin:latest\n    container_name: jellyfin\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Asia/Singapore\n    volumes:\n      - ./jellyfin/config:/config\n      - ./jellyfin/cache:/cache\n      - ./jellyfin/media:/media\n    restart: unless-stopped\n')),(0,a.kt)("p",null,"Run docker compose"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker compose up -d\n")),(0,a.kt)("h3",{id:"add-ssl-certificate"},"Add SSL Certificate"),(0,a.kt)("p",null,"Input domain names"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"homelab.duckdns.org *.homelab.duckdns.org\n")),(0,a.kt)("p",null,"Increase seconds to 120 if you get an error on Propagation"),(0,a.kt)("h3",{id:"edit-lighttpdconf"},"Edit lighttpd.conf"),(0,a.kt)("p",null,"Edit\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/lighttpd/lighttpd.conf"),"\nand change the line that says\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"server.port = 80"),"\xa0to use some other port number such as\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"8080"),"."),(0,a.kt)("p",null,"sudo systemctl restart lighttpd"),(0,a.kt)("p",null,"Pihole advanced edit proxy host fix?"),(0,a.kt)("h1",{id:"pihole-admin-fix"},"Pihole /admin/ Fix"),(0,a.kt)("p",null,' location / {\nproxy_pass http://{{pi-ip}}:{{port}}/admin/;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_hide_header X-Frame-Options;\nproxy_set_header X-Frame-Options "SAMEORIGIN";\nproxy_read_timeout 90;\n}'),(0,a.kt)("h3",{id:"custom-motd"},"Custom MOTD"),(0,a.kt)("p",null,'sudo su\ntoilet --termwidth --filter border --gay --font future -k "Diet Pi" > /etc/motd\ncat /proc/device-tree/model >> /etc/motd\nprintf "\\n" >> /etc/motd\nexit'))}d.isMDXComponent=!0}}]);