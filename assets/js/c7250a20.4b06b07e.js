"use strict";(self.webpackChunkapp_src=self.webpackChunkapp_src||[]).push([[905],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},58544:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={id:"dotnet-test-command",title:"Dotnet Test Command",tags:["dotnet"]},s=void 0,l={unversionedId:"dotnet/dotnet-test-command",id:"dotnet/dotnet-test-command",title:"Dotnet Test Command",description:"Sample Test Command",source:"@site/docs/dotnet/dotnet-test-command.md",sourceDirName:"dotnet",slug:"/dotnet/dotnet-test-command",permalink:"/app/docs/dotnet/dotnet-test-command",draft:!1,tags:[{label:"dotnet",permalink:"/app/docs/tags/dotnet"}],version:"current",frontMatter:{id:"dotnet-test-command",title:"Dotnet Test Command",tags:["dotnet"]},sidebar:"tutorialSidebar",previous:{title:"Dotnet Nunit Assert",permalink:"/app/docs/dotnet/dotnet-nunit-assert"},next:{title:"Dotnet Test Enumerate",permalink:"/app/docs/dotnet/dotnet-test-enumerate"}},i={},p=[{value:"Sample Test Command",id:"sample-test-command",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"sample-test-command"},"Sample Test Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'dotnet test "--logger:junit;LogFilePath=./test-reports/results.xml" ./Project.Tests.xxx -v n --no-build --filter\nTestCategory=xxx -- NUnit.NumberOfTestWorkers=10 -- TestRunParameters.Parameter\\(name=\\"BUILD_NAME\\", value=\\"xxx\\"\\) --\nTestRunParameters.Parameter\\(name=\\"RUN_ID\\", value=\\"0\\"\\)\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"\u2013\u2013filter")," option can be used to fine tune which tests are executed."),(0,a.kt)("p",null,"For example to run the single test Test1 in TestClass1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet test --filter DisplayName=XUnitTestProject1.TestClass1.Test1\n")),(0,a.kt)("p",null,"To run all the tests in a single test class, the ~ ",(0,a.kt)("inlineCode",{parentName:"p"},"contains")," operator can be used, for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet test --filter DisplayName~XUnitTestProject1.TestClass1\n")),(0,a.kt)("p",null,"To run all tests with a specific category (trait), for example all the ",(0,a.kt)("inlineCode",{parentName:"p"},"Smoke Tests")," (in xUnit.net this would be the\nattribute ",'[Trait("Category", "Smoke Test")]',"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'dotnet test --filter Category="Smoke Test"\n')),(0,a.kt)("p",null,"The ! ",(0,a.kt)("inlineCode",{parentName:"p"},"not")," operator can be used as part of the filter expression, for example to run all tests except for Test1:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet test --filter FullyQualifiedName!=XUnitTestProject1.TestClass1.Test1\n")))}m.isMDXComponent=!0}}]);