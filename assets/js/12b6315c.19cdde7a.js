"use strict";(self.webpackChunkapp_src=self.webpackChunkapp_src||[]).push([[2088],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1224:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={id:"generate-self-signing-cert",title:"Generate Self Signing Cert",description:"Generate Self Signing Cert",tags:["cert","bitwarden","vaultwarden"]},o=void 0,i={unversionedId:"homelab/generate-self-signing-cert",id:"homelab/generate-self-signing-cert",title:"Generate Self Signing Cert",description:"Generate Self Signing Cert",source:"@site/docs/homelab/generate-self-signing-cert.md",sourceDirName:"homelab",slug:"/homelab/generate-self-signing-cert",permalink:"/app/docs/homelab/generate-self-signing-cert",draft:!1,tags:[{label:"cert",permalink:"/app/docs/tags/cert"},{label:"bitwarden",permalink:"/app/docs/tags/bitwarden"},{label:"vaultwarden",permalink:"/app/docs/tags/vaultwarden"}],version:"current",frontMatter:{id:"generate-self-signing-cert",title:"Generate Self Signing Cert",description:"Generate Self Signing Cert",tags:["cert","bitwarden","vaultwarden"]},sidebar:"tutorialSidebar",previous:{title:"Ansible Playbook",permalink:"/app/docs/homelab/ansible-playbook"},next:{title:"Homelab Hardware",permalink:"/app/docs/homelab/homelab-hardware"}},s={},p=[{value:"1. Check Logs",id:"1-check-logs",level:3},{value:"2. Restart Nginx",id:"2-restart-nginx",level:3},{value:"3. Check Port Listening",id:"3-check-port-listening",level:3},{value:"4. Modify <code>vaultwarden.env</code>",id:"4-modify-vaultwardenenv",level:3},{value:"5. Install Prerequisites",id:"5-install-prerequisites",level:3},{value:"6. Install GPG key",id:"6-install-gpg-key",level:3},{value:"7. Install Repository",id:"7-install-repository",level:3},{value:"8. Install Docker",id:"8-install-docker",level:3},{value:"9. Enable at boot and start Docker daemon",id:"9-enable-at-boot-and-start-docker-daemon",level:3},{value:"10. Docker Compose",id:"10-docker-compose",level:3},{value:"11. Add SSL Certificate",id:"11-add-ssl-certificate",level:3},{value:"12. Edit lighttpd.conf",id:"12-edit-lighttpdconf",level:3},{value:"13. Pihole /admin/ Fix",id:"13-pihole-admin-fix",level:3},{value:"14. Custom MOTD",id:"14-custom-motd",level:3}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"1-check-logs"},"1. Check Logs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"journalctl -u vaultwarden.service\n")),(0,r.kt)("h3",{id:"2-restart-nginx"},"2. Restart Nginx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"systemctl restart nginx.service\n")),(0,r.kt)("h3",{id:"3-check-port-listening"},"3. Check Port Listening"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"ss -tulpn | grep LISTEN\n")),(0,r.kt)("h3",{id:"4-modify-vaultwardenenv"},"4. Modify ",(0,r.kt)("inlineCode",{parentName:"h3"},"vaultwarden.env")),(0,r.kt)("p",null,"On RPi 2, open the ",(0,r.kt)("inlineCode",{parentName:"p"},"vaultwarden.env")," file using the nano editor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"nano /mnt/dietpi_userdata/vaultwarden/vaultwarden.env\n")),(0,r.kt)("p",null,"Disable TLS by commenting out the ",(0,r.kt)("inlineCode",{parentName:"p"},"ROCKET_TLS")," line:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'#ROCKET_TLS={certs="./cert.pem",key="./privkey.pem"}\n')),(0,r.kt)("p",null,"Enable websocket notifications by adding the following lines:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"WEBSOCKET_ENABLED=true\nWEBSOCKET_ADDRESS=0.0.0.0\nWEBSOCKET_PORT=3012\n")),(0,r.kt)("p",null,"Save the file."),(0,r.kt)("p",null,"Restart the ",(0,r.kt)("inlineCode",{parentName:"p"},"vaultwarden")," service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"systemctl restart vaultwarden.service\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"vaultwarden")," is now reachable on HTTP. ROCKET_PORT and ROCKET_TLS are the parameters used to specify HTTP/S port + SSL\ncertificate used by vaultwarden to enable SSL access. If you have any questions about these parameters, you might need\nto reach out to the vaultwarden developer for a deeper explanation."),(0,r.kt)("h3",{id:"5-install-prerequisites"},"5. Install Prerequisites"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt -y install apt-transport-https ca-certificates curl gnupg2 software-properties-common\n")),(0,r.kt)("h3",{id:"6-install-gpg-key"},"6. Install GPG key"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"sudo mkdir -p /etc/apt/keyrings && curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n")),(0,r.kt)("h3",{id:"7-install-repository"},"7. Install Repository"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n')),(0,r.kt)("h3",{id:"8-install-docker"},"8. Install Docker"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt-get update && sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n")),(0,r.kt)("h3",{id:"9-enable-at-boot-and-start-docker-daemon"},"9. Enable at boot and start Docker daemon"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"sudo systemctl enable docker\nsudo systemctl start docker\n")),(0,r.kt)("h3",{id:"10-docker-compose"},"10. Docker Compose"),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file with the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3.8"\nservices:\nnginx-proxy-manager:\nimage: jc21/nginx-proxy-manager:latest\ncontainer_name: nginx-proxy-manager\nports:\n  - 80:80\n  - 81:81\n  - 443:443\nvolumes:\n  - ./nginx/data:/data\n  - ./nginx/letsencrypt:/etc/letsencrypt\nrestart: unless-stopped\njellyfin:\nimage: lscr.io/linuxserver/jellyfin:latest\ncontainer_name: jellyfin\nenvironment:\n  - PUID=1000\n  - PGID=1000\n  - TZ=Asia/Singapore\nvolumes:\n  - ./jellyfin/config:/config\n  - ./jellyfin/cache:/cache\n  - ./jellyfin/media:/media\nrestart: unless-stopped\n')),(0,r.kt)("p",null,"Run Docker Compose:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker-compose up -d\n")),(0,r.kt)("h3",{id:"11-add-ssl-certificate"},"11. Add SSL Certificate"),(0,r.kt)("p",null,"Input domain names:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"homelab.duckdns.org *.homelab.duckdns.org\n")),(0,r.kt)("p",null,"Increase seconds to 120 if you get an error on Propagation."),(0,r.kt)("h3",{id:"12-edit-lighttpdconf"},"12. Edit lighttpd.conf"),(0,r.kt)("p",null,"Edit ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/lighttpd/lighttpd.conf")," and change the line that says ",(0,r.kt)("inlineCode",{parentName:"p"},"server.port = 80")," to use some other port number such\nas ",(0,r.kt)("inlineCode",{parentName:"p"},"8080"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"sudo systemctl restart lighttpd\n")),(0,r.kt)("h3",{id:"13-pihole-admin-fix"},"13. Pihole /admin/ Fix"),(0,r.kt)("p",null,"Add the following configuration to fix the Pihole ",(0,r.kt)("inlineCode",{parentName:"p"},"/admin/"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'location / {\nproxy_pass http://{{pi-ip}}:{{port}}/admin/;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_hide_header X-Frame-Options;\nproxy_set_header X-Frame-Options "SAMEORIGIN";\nproxy_read_timeout 90;\n}\n')),(0,r.kt)("h3",{id:"14-custom-motd"},"14. Custom MOTD"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'sudo su\ntoilet --termwidth --filter border --gay --font future -k "Diet Pi" > /etc/motd\ncat /proc/device-tree/model >> /etc/motd\nprintf "\\n" >> /etc/motd\nexit\n')))}d.isMDXComponent=!0}}]);