"use strict";(self.webpackChunkapp_src=self.webpackChunkapp_src||[]).push([[990],{94769:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var t=i(85893),s=i(11151);const o={slug:"top-10-design-principles",title:"Top 10 Design Principles",authors:["lejencodes"],tags:["design-principles"]},r=void 0,a={permalink:"/app/blog/top-10-design-principles",source:"@site/blog/2022-04-12-top-10-design-principles.md",title:"Top 10 Design Principles",description:"What I learned and understand so far...",date:"2022-04-12T00:00:00.000Z",formattedDate:"April 12, 2022",tags:[{label:"design-principles",permalink:"/app/blog/tags/design-principles"}],readingTime:3.445,hasTruncateMarker:!1,authors:[{name:"Lejen",title:"Just a person",url:"https://lejencodes.com",imageURL:"https://github.com/lejencodes.png",key:"lejencodes"}],frontMatter:{slug:"top-10-design-principles",title:"Top 10 Design Principles",authors:["lejencodes"],tags:["design-principles"]},unlisted:!1,prevItem:{title:"Method of RPA Bots Deployment",permalink:"/app/blog/method-of-rpa-bots-deployment"},nextItem:{title:"Python Refactoring",permalink:"/app/blog/python-refactoring"}},l={authorsImageUrls:[void 0]},d=[{value:"1. Divide and Conquer",id:"1-divide-and-conquer",level:2},{value:"2. Increase cohesion",id:"2-increase-cohesion",level:2},{value:"3. Reduce coupling",id:"3-reduce-coupling",level:2},{value:"4. Increase abstract",id:"4-increase-abstract",level:2},{value:"5. Increase re-usability",id:"5-increase-re-usability",level:2},{value:"6. Design for flexibility",id:"6-design-for-flexibility",level:2},{value:"7. Anticipate Obsolescence",id:"7-anticipate-obsolescence",level:2},{value:"8. Design for portability / scalability",id:"8-design-for-portability--scalability",level:2},{value:"9. Design for testability",id:"9-design-for-testability",level:2},{value:"10. Design defensively",id:"10-design-defensively",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"What I learned and understand so far..."}),"\n",(0,t.jsx)(n.h2,{id:"1-divide-and-conquer",children:"1. Divide and Conquer"}),"\n",(0,t.jsx)(n.p,{children:"This stay on the top as it's the most important principle, for instances when we are being provided with a business case\nwith huge list of requirements, we started to confuse ourselves and often the solution came up straight away potentially\nnot the best solution. The idea of divide is to decompose a given problem into two or more similar, sub-problems, which\nthen we conquer by composing solutions to the give problem."}),"\n",(0,t.jsx)(n.h2,{id:"2-increase-cohesion",children:"2. Increase cohesion"}),"\n",(0,t.jsxs)(n.p,{children:["A good object oriented design must be loosely coupled and highly cohesive. This design principle have been created based\non the idea of ",(0,t.jsx)(n.code,{children:"Loose coupling and high cohesion"}),". Don't mixed up with Cohesion and Coupling, as cohesion refers to what\na class, module or function can do. Low cohesion would means that it does great variety of action being unfocused on\nwhat it should do. Another way to think of this is to have something that could not be broken down further, and should\nbe doing only one thing."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example of Low Cohesion:"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsx)(n.tr,{children:(0,t.jsx)(n.th,{children:"Staff"})})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsx)(n.tr,{children:(0,t.jsx)(n.td,{children:"check_email()"})}),(0,t.jsx)(n.tr,{children:(0,t.jsx)(n.td,{children:"send_email()"})}),(0,t.jsx)(n.tr,{children:(0,t.jsx)(n.td,{children:"email_validate()"})}),(0,t.jsx)(n.tr,{children:(0,t.jsx)(n.td,{children:"get_salary()"})})]})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example of High Cohesion:"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsx)(n.tr,{children:(0,t.jsx)(n.th,{children:"Staff"})})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsx)(n.tr,{children:(0,t.jsx)(n.td,{children:"-salary"})}),(0,t.jsx)(n.tr,{children:(0,t.jsx)(n.td,{children:"-email_add"})}),(0,t.jsx)(n.tr,{children:(0,t.jsx)(n.td,{})}),(0,t.jsx)(n.tr,{children:(0,t.jsx)(n.td,{children:"set_salary()"})}),(0,t.jsx)(n.tr,{children:(0,t.jsx)(n.td,{children:"get_salary()"})}),(0,t.jsx)(n.tr,{children:(0,t.jsx)(n.td,{children:"set_email_add"})}),(0,t.jsx)(n.tr,{children:(0,t.jsx)(n.td,{children:"get_email_add"})})]})]}),"\n",(0,t.jsx)(n.h2,{id:"3-reduce-coupling",children:"3. Reduce coupling"}),"\n",(0,t.jsx)(n.p,{children:"This refers to how related or dependent of two classes / modules. Low coupled would mean that changing something in\nmajor should not affect the other. High coupling would increase the difficulties of code maintenance, a change of module\nusually forces a ripple effect of changes in other modules. The lesser dependencies the better"}),"\n",(0,t.jsx)(n.h2,{id:"4-increase-abstract",children:"4. Increase abstract"}),"\n",(0,t.jsx)(n.p,{children:"Abstraction is one of the key principles behind many of the OO design principles such as below and is the hardest in my\nopinion. The idea is to have a simplified version of something technical and the goal is to reduce complexity."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Inheritance"}),"\n",(0,t.jsx)(n.li,{children:"Polymorphism"}),"\n",(0,t.jsx)(n.li,{children:"Composition"}),"\n",(0,t.jsx)(n.li,{children:"Benefits of abstraction"}),"\n",(0,t.jsx)(n.li,{children:"Code is easy to understand"}),"\n",(0,t.jsx)(n.li,{children:"Manages change and the effect of change"}),"\n",(0,t.jsx)(n.li,{children:"Creates cohesive code \u2013 it finds common fields"}),"\n",(0,t.jsx)(n.li,{children:"Create loose coupling"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Code_Complete",children:"https://en.wikipedia.org/wiki/Code_Complete"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"abstraction is the ability to view a complex operation in a simplified form. A class interface provides an abstraction\nof the implementation that\u2019s hidden behind the interface"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Some examples below:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Concrete"})}),"\n",(0,t.jsx)(n.p,{children:"place_triangle(triangle)\nplace_square(square)\nplace_circle(circle)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Abstract"})}),"\n",(0,t.jsx)(n.p,{children:"place_shape(shape)"}),"\n",(0,t.jsx)(n.p,{children:"You will just lock down the attributes like x, y, areas"}),"\n",(0,t.jsx)(n.h2,{id:"5-increase-re-usability",children:"5. Increase re-usability"}),"\n",(0,t.jsx)(n.p,{children:"Think of writing codes as re-usable as possible, the challenge part could be keeping the balance on spending more time\nto design and write a general function. I see this as a investment of time to reduce the future time needed to go back\nand understand the piece of code."}),"\n",(0,t.jsx)(n.h2,{id:"6-design-for-flexibility",children:"6. Design for flexibility"}),"\n",(0,t.jsx)(n.p,{children:"Think ahead and anticipate that the fact of there will be a change in the future, as and when the business grows,\nrequirement changes and more. A-lot of time when comes to an end of project, I realised that I have to add some features\nand based on the way I have written my codes, that's not possible. Ending up spending more time to re-write and\nre-design the whole program."}),"\n",(0,t.jsx)(n.h2,{id:"7-anticipate-obsolescence",children:"7. Anticipate Obsolescence"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Avoid early release and version of software"}),"\n",(0,t.jsx)(n.li,{children:"Use software from reputable companies"}),"\n",(0,t.jsx)(n.li,{children:"Use as few external dependencies as possible"}),"\n",(0,t.jsx)(n.li,{children:"Avoid poorly documented or maintained projects"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"8-design-for-portability--scalability",children:"8. Design for portability / scalability"}),"\n",(0,t.jsx)(n.p,{children:"Think ahead about possibility to have your program in other platform. Things can get harder when your client based grows\nand you do not have the ability to scale your program or port to another platform."}),"\n",(0,t.jsx)(n.h2,{id:"9-design-for-testability",children:"9. Design for testability"}),"\n",(0,t.jsx)(n.p,{children:"This is important especially for larger code based project. Design the code in a way that you are able to test the code.\nThink of test case, functional test, unit test, and find out a way to test the code."}),"\n",(0,t.jsx)(n.h2,{id:"10-design-defensively",children:"10. Design defensively"}),"\n",(0,t.jsx)(n.p,{children:"Idiot proof your code. Good error messages, handling all the invalid input, handling wrong output."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>r});var t=i(67294);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);